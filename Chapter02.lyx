#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass classicthesis
\use_default_options true
\maintain_unincluded_children false
\language american
\language_package default
\inputencoding default
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 0
\use_mhchem 1
\use_mathdots 1
\cite_engine natbib_numerical
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 2
\tocdepth 2
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Chapter
Research study 
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
Where did the problem come from? What is already known about this problem?
 What other methods have been tried to solve it? Ideally, you will already
 have much of the hard work done, if you have been keeping up with the literatur
e as you vowed to do three years ago, and if you have made notes about important
 papers over the years.
 If you have summarised those papers, then you have some good starting points
 for the review.
\end_layout

\begin_layout Plain Layout
If you didn't keep your literature notes up to date, you can still do something
 useful: pass on the following advice to any beginning PhD students in your
 lab and tell them how useful this would have been to you.
 When you start reading about a topic, you should open a spread sheet file,
 or at least a word processor file, for your literature review.
 Of course you write down the title, authors, year, volume and pages.
 But you also write a summary (anything from a couple of sentences to a
 couple of pages, depending on the relevance).
 In other columns of the spread sheet, you can add key words (your own and
 theirs) and comments about its importance, relevance to you and its quality.
\end_layout

\begin_layout Plain Layout
How many papers? How relevant do they have to be before you include them?
 Well, that is a matter of judgement.
 On the order of a hundred is reasonable, but it will depend on the field.
 You are the world expert on the (narrow) topic of your thesis: you must
 demonstrate this.
\end_layout

\begin_layout Plain Layout
A political point: make sure that you do not omit relevant papers by researchers
 who are like to be your examiners, or by potential employers to whom you
 might be sending the thesis in the next year or two.
\end_layout

\end_inset


\end_layout

\begin_layout Section
Origin of the problem
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename gfx/pipevisualisation.png
	lyxscale 50
	width 100text%

\end_inset


\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:pipevisualisation"

\end_inset

Visualisation of data from a Yahoo Pipe
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Web mashups are Web applications generated by combining content, presentation,
 or application functionality from disparate Web sources.
 They aim to combine these sources to create useful new applications or
 services.
 Content and presentation elements typically come in the form of RSS or
 Atom feeds, various XML formats, or as HTML, Shock-Wave Flash (SWF), or
 other graphical elements.
 Publicly available APIs (in JavaScript, for example) typically provide
 application functionality.
 Content, functionality and presentation are then glued together in disparate
 ways: via JavaScript in the browser, server-side scripting languages such
 as Hypertext Preprocessor (PHP) or Ruby, or traditional languages such
 as Java or C#.
\end_layout

\begin_layout Standard
Web mashups are websites that wrap and reuse contents provided by third
 parties as Web sites or services, often accompanied by a proper API.
 The first mashups couldn’t rely on API's, as the actual content providers
 in the first place didn’t know that their Web sites were wrapped into other
 applications.
 The first mashups with Google Maps were arising even before the official
 release of the Google Maps API back in 2006.
 Eventually their API was Google’s answer to the growing number of hacked
 map integrations, where people would read the whole AJAX code of the Maps
 application and derived the needed functionalities.
\end_layout

\begin_layout Standard
To speed the overall mashup development process, but also to enable even
 inexperienced end users to mash up their own Web applications, numerous
 mashup-specific development tools and frameworks have recently emerged,
 not all with even succes.
 These instruments typically come with a variety of features and a mixture
 of composition approaches.
 A close look at them lets us identify the open issues and research challenges
 characterizing the mashup phenomenon
\begin_inset CommandInset citation
LatexCommand citep
key "Yu:2008:UMD:1439188.1439257"

\end_inset

.
\end_layout

\begin_layout Standard
The terms Internet and World Wide Web are often used in every-day speech
 without much distinction.
 However, the Internet and the World Wide Web are not one and the same.
 The Internet is a global system of interconnected computer networks.
 In contrast, the Web is one of the services that runs on the Internet.
 It is a collection of textual documents and other resources, linked by
 hyperlinks and URLs, transmitted by web browsers and web servers.
 In short, the Web can be thought of as an application "running" on the
 Internet
\begin_inset CommandInset citation
LatexCommand citep
key "W3C"

\end_inset

.
 As the Web grows larger and more diverse, search engines are becoming the
 “killer app” of the Web.
 Whenever users want to look up information, they typically go to a search
 engine, issue queries and look at the results.
 The searchable web and the search engines which survey it have become indispens
able tools for information discovery
\end_layout

\begin_layout Standard
Further until now, a specific software service could only be used within
 a particular language or platform, and was often not accessible across
 a network.
 Web services are a new breed of software component that is language, platform,
 and location independent.
 They are Extensible Markup Language (XML)-based building blocks for the
 next generation of applications whose parts can reside in a single machine
 or span the globe.
 The majority of distributed applications will be built out of web services,
 regardless of whether they are deployed to a single machine, a corporate
 intranet, or the Internet 
\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
Thus, we identify the behaviors and characteristics of general Mashup applicatio
ns and analyze the tools with respect to the data integration aspect 
\begin_inset CommandInset citation
LatexCommand citep
key "DiLorenzo:2009:DIM:1558334.1558343"

\end_inset

.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
There are a lot of visualisation libraries available in JavaScript.
 But it seems that there is not that much support for complex data.
 Mostly it is necessary to add the data manually or hard coded.
 Some libraries have improved support, like Google Chart.
 But it is not always abstract or generaly usable.
 For example the Google Chart API supports Google Docs as data source.
 This is a good improvement, altough the data format can only be used by
 the Google visualisation library.
 
\end_layout

\begin_layout Standard
One of the goals of Web 2.0 is to make it easy to create, use, describe,
 share, and reuse resources on the Web.
 To achieve that, technologies have flourished around this concept (e.g.,
 blogs, social networks).
 The capabilities of Web 2.0 are further enhanced by many service providers
 who expose their applications in two ways: one is to expose application
 functionalities via Web APIs such as Google Map, Amazon.com or Youtub2,
 the other is to expose data feeds such as RSS and ATOM.
 This opened up new and exciting possibilities for service consumers and
 providers as it enabled the notion of using these services3 as “ingredients”
 that can be mixed-and-matched to create new applications.
\begin_inset CommandInset citation
LatexCommand citep
key "sigmod:2009"

\end_inset


\end_layout

\begin_layout Subsection
Description of the previous work
\end_layout

\begin_layout Standard
Distributed programming has shifted from private networks to the public
 Internet and from using private and controlled services to increasingly
 using publicly available heterogeneous Web services (e.g., REST, SOAP, RSS,
 and Atom).
 This move enables the creation of innovative end-user-oriented composed
 services with user interfaces.
 These services mashups are typically point solutions to specific (specialized)
 problems; however, what is missing is a programming model that facilitates
 and accelerates creation and deployment of mashups of diverse services.
\end_layout

\begin_layout Standard
There are two paradigm shifts occurring on the Web that are changing the
 way software is developed and used.
 The first is the increasing availability of Web API's in the form of Representa
tional State Transfer (REST) and SOAP services, as well as RSS and Atom
 data services.
 These Web APIs enable external partners (or software agents) to use the
 data and processes of the service providers into their own Web application
 or Web client.
 In this extent, Web APIs have resulted in various composed web services
 with User Interfaces, the so called mashups which provide solutions to
 very specific and narrow problems.
 The second paradigm shift is a movement to increasingly Web applications
 that are using dynamic programming languages and frameworks, e.g., JavaScript
 and AJAX, Ruby and Ruby on Rails (RoR), Python and Zope 
\begin_inset CommandInset citation
LatexCommand citep
key "LanguageforWebAPIs"

\end_inset

.
\end_layout

\begin_layout Itemize
The use and the evolvement of data mash-ups like Yahoo Pipes, which gave
 more widespread access to data and changed the experience of the web totally.
 It transformed the web by making in fact every element on the web accessable
 to use as data element.
\end_layout

\begin_layout Itemize
Work from other people who were facing the same problem or similar things
 to tackle.
 
\end_layout

\begin_layout Itemize
Things that have been investigated in the past.
\end_layout

\begin_layout Standard
The granularity of components is that of stand-alone modules or applications,
 and the goal is to build composite applications that leverage the components’
 individual User Interfaces to produce richer, composite UI applications.
 The need for such integration is manifest, and examples are numerous: applicati
ons overlaying real estate information over Google maps, aggregated dashboards
 showing consoles monitoring different aspects of a computer’s performance
 or web operating systems that allow coordinated interactions with multiple
 applications on the same web page.
 All these examples require coordination among application UI's (e.g., zooming
 out on a map means that overlaid information on houses for sale must change
 as well).
\end_layout

\begin_layout Subsection
Review of the previous work 
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
Some sort of conclusion, what I think about the previous work done.
 How relevant do they have to be before you include them? Well, that is
 a matter of judgement.
 On the order of a hundred is reasonable, but it will depend on the field.
 You are the world expert on the (narrow) topic of your thesis: you must
 demonstrate this.
\end_layout

\begin_layout Plain Layout
Why do I have included some previous work or not.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
In the meantime, troughout the years there have been some improvements.
 But there is still some work to do.
 In general, the libraries themself have evolved to create more beautiful
 visualisation.
 But still in the core essence; the availibility of the data so it can be
 used easily, is still far away.
 There is better support, thanks to JSON which gets supported more and more
 by libraries.
 But the problem is not yet abstract enough.
 Yahoo Pipes creates a good abstraction layer by making the data available
 in a uniform format; JSON.
 But it has to be taken one step further.
 A better integration into JavaScript is necessary, a more general data
 format which can be used by not just one visualisation library.
 When the data is handled in a general way, as a javascript object, it can
 be integrated more easily into other visualisation libraries.
 This way the choice of the visualisation libary is free and data can be
 handled easily.
\end_layout

\begin_layout Standard
To manage data, the tools make available only a small set of operators for
 data integration and manipulation.
 The set of provided operators is usually designed based on the main goal
 of the tool.
 For example, if the tool is visualization oriented, only few operators
 for data elaboration such as filtering and sorting are available.
 In addition, the offered operators are not easy to use, at least from a
 naive user point of view.
 Also, the tools do not offer powerful expressiveness since they allow expressin
g only simple operations, e.g., simple joins, and can’t be used to express
 more complicated queries such as joins with conditions, division, etc.
 This means that, from the expressiveness point of view, these tools are
 far from reaching the database languages, i.e., integration languages, such
 as SQL.
 None of the analyzed tools implement a Push strategy for the data refreshing
 and the reason is that the majority of the currently available APIs are
 REST based.
 The style of the REST protocol requires all communications between the
 browser and the server to be initiated by the client and no support is
 offered to maintain the state of the connection.
 All the analyzed tools use a Pull strategy for data freshness handling.
 This can be motivated also by the fact that the tools providers wish to
 control (or prevent) the overloading of their servers.
 In addition, they implement a Global strategy for the pull interval setting.
 This strategy however does not allow developing applications in which processed
 data are characterized by a high refresh frequency, since it is not possible
 to explicitly specify the refresh rate for each source.
 The current development of Mashup tools is mainly focused on offering features
 to access, manage, and present data.
 Less consideration has instead been given to the issue of data sharing
 and security so far.
 The security criterion needs to be taken into account inside the tools
 since communication problems could make a Mashup perform too many requests
 to source data servers, causing overloads for those servers.
 Also, all the analyzed tools are server side applications, meaning that
 both the created Mashup and the data involved in it are hosted on a server
 owned by the tool provider.
 Therefore, the tool provider has the total control on the Mashup and if
 a user wants to build an application containing that Mashup, the dependability
 attributes of that application cannot be properly evaluated.
 
\end_layout

\begin_layout Standard
Web mashups are Web applications developed using contents and services available
 online.
 Despite rapidly increasing interest in mashups over the past two years,
 comprehensive development tools and frameworks are lacking, and in most
 cases mashing up a new application implies a significant manual programming
 effort
\begin_inset CommandInset citation
LatexCommand citep
key "Yu:2008:UMD:1439188.1439257"

\end_inset

.
\end_layout

\end_body
\end_document
