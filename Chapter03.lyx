#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass classicthesis
\use_default_options true
\maintain_unincluded_children false
\language american
\language_package default
\inputencoding default
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine natbib_numerical
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 2
\tocdepth 2
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Chapter
My Research - The Mashup analysis 
\begin_inset Note Note
status collapsed

\begin_layout Subsection*
Description of problems and open questions, How do I tackle this problem
 
\end_layout

\begin_layout Plain Layout
Middle chapters
\end_layout

\begin_layout Plain Layout
In some theses, the middle chapters are the journal articles of which the
 student was major author.
 There are several disadvantages to this format.
 One is that a thesis is both allowed and expected to have more detail than
 a journal article.
 For journal articles, one usually has to reduce the number of figures.
 In many cases, all of the interesting and relevant data can go in the thesis,
 and not just those which appeared in the journal.
 The degree of experimental detail is usually greater in a thesis.
 Relatively often a researcher requests a thesis in order to obtain more
 detail about how a study was performed.
\end_layout

\begin_layout Plain Layout
Another disadvantage is that your journal articles may have some common
 material in the introduction and the "Materials and Methods" sections.
\end_layout

\begin_layout Plain Layout
The exact structure in the middle chapters will vary among theses.
 In some theses, it is necessary to establish some theory, to describe the
 experimental techniques, then to report what was done on several different
 problems or different stages of the problem, and then finally to present
 a model or a new theory based on the new work.
 For such a thesis, the chapter headings might be: Theory, Materials and
 Methods, {first problem}, {second problem}, {third problem}, {proposed
 theory/model} and then the conclusion chapter.
 For other theses, it might be appropriate to discuss different techniques
 in different chapters, rather than to have a single Materials and Methods
 chapter.
\end_layout

\begin_layout Plain Layout
Here follow some comments on the elements Materials and Methods, Theory,
 Results and discussion which may or may not correspond to thesis chapters.
\end_layout

\begin_layout Plain Layout
Materials and Methods 
\end_layout

\begin_layout Plain Layout
This varies enormously from thesis to thesis, and may be absent in theoretical
 theses.
 It should be possible for a competent researcher to reproduce exactly what
 you have done by following your description.
 There is a good chance that this test will be applied: sometime after you
 have left, another researcher will want to do a similar experiment either
 with your gear, or on a new set-up in a foreign country.
 Please write for the benefit of that researcher.
 In some theses, particularly multi-disciplinary or developmental ones,
 there may be more than one such chapter.
 In this case, the different disciplines should be indicated in the chapter
 titles.
\end_layout

\begin_layout Plain Layout
Theory 
\end_layout

\begin_layout Plain Layout
When you are reporting theoretical work that is not original, you will usually
 need to include sufficient material to allow the reader to understand the
 arguments used and their physical bases.
 Sometimes you will be able to present the theory ab initio, but you should
 not reproduce two pages of algebra that the reader could find in a standard
 text.
 Do not include theory that you are not going to relate to the work you
 have done.
 When writing this section, concentrate at least as much on the physical
 arguments as on the equations.
 What do the equations mean? What are the important cases?
\end_layout

\begin_layout Plain Layout
When you are reporting your own theoretical work, you must include rather
 more detail, but you should consider moving lengthy derivations to appendices.
 Think too about the order and style of presentation: the order in which
 you did the work may not be the clearest presentation.
\end_layout

\begin_layout Plain Layout
Suspense is not necessary in reporting science: you should tell the reader
 where you are going before you start.
\end_layout

\begin_layout Plain Layout
Results and discussion 
\end_layout

\begin_layout Plain Layout
The results and discussion are very often combined in theses.
 This is sensible because of the length of a thesis: you may have several
 chapters of results and, if you wait till they are all presented before
 you begin discussion, the reader may have difficulty remembering what you
 are talking about.
 The division of Results and Discussion material into chapters is usually
 best done according to subject matter.
 Make sure that you have described the conditions which obtained for each
 set of results.
 What was held constant? What were the other relevant parameters? Make sure
 too that you have used appropriate statistical analyses.
 Where applicable, show measurement errors and standard errors on the graphs.
 Use appropriate statistical tests.
\end_layout

\begin_layout Plain Layout
Take care plotting graphs.
 The origin and intercepts are often important so, unless the ranges of
 your data make it impractical, the zeros of one or both scales should usually
 appear on the graph.
 You should show error bars on the data, unless the errors are very small.
 For single measurements, the bars should be your best estimate of the experimen
tal errors in each coordinate.
 For multiple measurements these should include the standard error in the
 data.
 The errors in different data are often different, so, where this is the
 case, regressions and fits should be weighted (i.e.
 they should minimize the sum of squares of the differences weighted inversely
 as the size of the errors.) (A common failing in many simple software packages
 that draw graphs and do regressions is that they do not treat errors adequately.
 UNSW student Mike Johnston has written a plotting routine[24] that plots
 data with error bars and performs weighted least square regressions.
 It is at http://www.phys.unsw.edu.au/3rdyearlab/graphing/graph.html).
 You can just 'paste' your data into the input and it generates a .ps file
 of the graph.
\end_layout

\begin_layout Plain Layout
In most cases, your results need discussion.
 What do they mean? How do they fit into the existing body of knowledge?
 Are they consistent with current theories? Do they give new insights? Do
 they suggest new theories or mechanisms?
\end_layout

\begin_layout Plain Layout
Try to distance yourself from your usual perspective and look at your work.
 Do not just ask yourself what it means in terms of the orthodoxy of your
 own research group, but also how other people in the field might see it.
 Does it have any implications that do not relate to the questions that
 you set out to answer?
\end_layout

\end_inset


\end_layout

\begin_layout Section
Mashing up
\end_layout

\begin_layout Standard
Mashup is a new application development approach that allows users to aggregate
 multiple services to create a service for a new purpose.
 Even if the Mashup approach opens new and broader opportunities for data/servic
e consumers, the development process still requires the users to know not
 only how to write code using programming languages, but also how to use
 the different Web APIs from different services.
 In order to solve this problem, there is increasing effort put into developing
 tools which are designed to support users with little programming knowledge
 in Mashup applications development.
 The objective of this study is to analyze the richnesses and weaknesses
 of the Mashup tools with respect to the data integration aspect.
 Unlike Web services composition where the focus is on the composition of
 business (process) services only, the Mashup framework goes further in
 that it allows more functionalities and can compose heterogeneous resources
 such as data services, UI services, etc.
 Applications built using the Mashup technique are referred to as Mashups
 or Mashup applications.
 
\end_layout

\begin_layout Standard
We will be asking questions such as: How the tools handle data? What kind
 of processing is performed on the data? What is the output of Mashups?
 Which operators are provided for data transformation and for creating the
 data flow? What are the types of data supported by the available operators?
 etc.
\begin_inset CommandInset citation
LatexCommand citep
key "DiLorenzo:2009:DIM:1558334.1558343"

\end_inset


\end_layout

\begin_layout Subsection
Mashup tools
\end_layout

\begin_layout Standard
Currently a number of Mashup tools exist.
 We have selected only the following tools for three main reasons: (i) these
 tools were the most popular ones when this analysis was performed (judging
 from discussions on forums, blogs, etc.), (ii) some other tools have not
 been reported because of their unavailability at certain stages of the
 study preventing us to experiment and report results according to our analysis.
 Finally, (iii) this limitation is motivated by the fact that our objective
 is not to analyze all the tools but to give a view on the current state
 of these tools and understand their general approach to data integration.
\begin_inset CommandInset citation
LatexCommand citep
key "DiLorenzo:2009:DIM:1558334.1558343"

\end_inset


\end_layout

\begin_layout Subsubsection
Yahoo Pipes
\end_layout

\begin_layout Standard
Yahoo Pipes
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
http://pipes.yahoo.com
\end_layout

\end_inset

 is a web application from Yahoo! that provides a graphical user interface
 for building data mashups that aggregate web feeds, web pages, and other
 services, creating Web-based apps from various sources, and publishing
 those apps.
 The application works by enabling users to "pipe" information from different
 sources and then set up rules for how that content should be modified (for
 example, filtering).
 A typical example is New York Times through Flickr
\begin_inset CommandInset citation
LatexCommand citep
key "pipes:NYTtruFlickr"

\end_inset

, a pipe which takes The New York Times RSS feed and adds a photo from Flickr
 based on the keywords of each item.
 An API documentation with examples are provided.
 There is also a community with a forum to post questions and pipes created
 by other can be browsed and forked onto your own creations.
 That way work done by others don't have to be done again.
 Pipes can be cloned and adapted to differents needs for each user.
 The possibilities are endless, which enables a lot of creativity in collecting
 and creating content.
 It is a fairly easy application for aggreating data, with a visual User
 Interface.
 Users can create the pipe they want easily, via drag and drop.
 The complete experience of the service can be used by less skilled programmers,
 there is a lot of power in Yahoo Pipes.
 Users select their web content, load it into the editor, filters the content
 and exports the data.
 My library provides additional functionality by going on step further:
 making the data more accessable for visualisation.
 In JavaScript, there are written a lot of libraries to visualise data in
 all kinds of ways.
 But there is one mayor drawback and that is the access to the data.
 The libraries that make use of JavaScript, have limited or library-specific
 functionality in terms of data access.
 
\end_layout

\begin_layout Standard
Yahoo pipes8 is a web-based tool provided by Yahoo.
 The users can build mashup applications by aggregating and manipulating
 data from web feeds, web pages, and other services.
 A pipe is composed of one or more modules, each one performing a single
 task like retrieving feeds from a web source, filter, sort or merge feeds.
 The output from pipes can be either accessed by a client via a unique URL
 as RSS or JSON, or visualised on the Yahoo Map.
\begin_inset CommandInset citation
LatexCommand citep
key "DiLorenzo:2009:DIM:1558334.1558343"

\end_inset


\end_layout

\begin_layout Subsubsection
Popfly
\end_layout

\begin_layout Standard
Popfly is a web-based Mashup application by Microsoft.
 It allows the users to create a Mashup combining data and media sources.
 The Mashup is built by connecting blocks.
 Each block is associated to a service like “Flicker”10 and exposes one
 or more functionalities.
 Popfly is much more about data visualization than data manipulation as
 we will see later, so the “mashed” data can be only visualized using the
 provided visualization tool.
 On July 16, 2009, the Popfly team announced that the Popfly service would
 be discontinued on August 24, 2009.
 All sites, references and resources of popfly were taken down, and this
 product is considered defunct.
\end_layout

\begin_layout Subsubsection
Google Mashup Editor (Deprecated, since January 14, 2009)
\end_layout

\begin_layout Subsubsection
MashMaker
\end_layout

\begin_layout Standard
is a web-based tool by Intel for editing, querying and manipulating web
 data.
 MashMaker is different from the other tools in that it works directly on
 web pages.
 In fact, MashMaker allows users to create a mashup by browsing and combining
 different web pages.
 The final goal of this tool is to suggest to the user some enhancements
 (mashups or widgets), if available, for the visited web pages.
\end_layout

\begin_layout Subsubsection
Firefox Ubiquity
\end_layout

\begin_layout Standard
Ubiquity, an add-on for Mozilla Firefox, is a collection of quick and easy
 natural-language-derived commands that act as mashups of web services,
 thus allowing users to get information and relate it to current and other
 webpages.
 It also allows Web users to create new commands without requiring much
 technical background.
\end_layout

\begin_layout Subsubsection
WSO2
\end_layout

\begin_layout Standard
The WSO2 Mashup Server is an open source mashup platform that hosts JavaScript
 based mashups.
 It is based on Apache Axis2 and other open source projects, and provides
 JavaScript authors the ability to consume, compose and emit web services,
 feeds, scraped web pages, email, and instant messages.
 The source code is freely available under the open source Apache License.
 It provides a runtime platform for developing and deploying mashups.
 It can be downloaded and deployed locally or within an organization.
\end_layout

\begin_layout Subsection
Mashup levels
\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
A lot of searching and analysing the problem.
 I spend a lot of time trying to figure out what exactly the problem is
 and how to define it.
 Also in this view, where I can bring the most value.
 What are the difficult parts, which ones are already investigated or need
 some more attention.
 It's not just one item to research, but a complex situation.
 This can have several views and approaches, each aimed at specific targets.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Here in this section I provide more detail on my approach.
 There is a difference between the literature study and the implementation.
 The first is a general synthesis, an idea or a problem which requires some
 thinking work to come up with a solution.
 The second part is, as it were, a more lined selection of the problem which
 than can be tackeld.
 D
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
escription of problems and open questions, How do I tackle this problem
 Middle chapters A lot of searching and analysing the problem.
 I spend a lot of time trying to figure out what exactly the problem is
 and how to define it.
 Also in this view, Where I can bring the most value? What are the difficult
 parts? Which ones are already investigated or need some more attention?
 
\end_layout

\end_inset


\end_layout

\begin_layout Section
Philosophy of approach/ plan of attack
\end_layout

\begin_layout Standard
A Mashup application includes all the three components of the MVC pattern.
 According to Maximilien et al.
 
\begin_inset CommandInset citation
LatexCommand citep
key "springerlink:10.1007/978-3-540-74974-5_2"

\end_inset

, the three major components of a Mashup application are (1) data level,
 (2) process level, and (3) presentation level.
\end_layout

\begin_layout Section
MVC
\end_layout

\begin_layout Standard
In the MVC pattern, the model represents the data on which the application
 operates and the business rules used to manipulate the data.
 The model is independent of the view and the controller.
 It passively supplies its services and data to the other layers of the
 application.
 The view represents the output of the application.
 It specifies how the data, accessed through the model, is presented to
 the user.
 Also, it has to maintain its presentation when the model changes.
 Finally, the controller represents the interface between the model and
 the view.
 It translates interactions with the view into actions to be performed on
 the model.
\end_layout

\begin_layout Subsection
Data
\end_layout

\begin_layout Standard
This level mainly concerns data mediation and integration.
 Challenges at this level involve accessing and integrating data residing
 in multiple and heterogeneous sources such as web data and statistical
 or enterprise data.
 Regarding the data mediation, the complexity comes from structural and
 semantics diversities of the schema to be merged.
 As any source of data can be possible, there cannot be a single defined
 structure or semantics.
 In some cases, data sources can be either structured for which a well defined
 data model is available (e.g., XML
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Extensible Markup Language
\end_layout

\end_inset

, RSS
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
RSS (originally RDF Site Summary, often dubbed Really Simple Syndication)
 is a family of web feed formats used to publish frequently updated works—such
 as blog entries, news headlines, audio, and video—in a standardized format
\begin_inset CommandInset citation
LatexCommand citep
key "libby:rss_spec"

\end_inset


\end_layout

\end_inset

 and ATOM
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
The name Atom applies to a pair of related standards.
 The Atom Syndication Format is an XML language used for web feeds, while
 the Atom Publishing Protocol (AtomPub or APP) is a simple HTTP-based protocol
 for creating and updating web resources.
\end_layout

\end_inset

), or unstructured (e.g., audio, email text, office documents).
 In the latter case, the unstructured data needs to be pre-processed in
 order to extract their meaning and create structured data.
 So, this level consists of all possible data manipulations (conversion,
 filtering, format transformation, combination, etc.) needed to integrate
 different data sources.
 Each manipulation could be done by analyzing both syntax and semantics
 requirements.
\begin_inset CommandInset citation
LatexCommand citep
key "Halevy:2005:WYD:1103822.1103836"

\end_inset

In a certain way, Yahoo Pipes provides a mechanism to narrow the data definition
s.
 
\end_layout

\begin_layout Subsection
Process
\end_layout

\begin_layout Standard
T he integration at the process level has been studied specially in the
 workflow and service oriented composition areas.
 At the process level, the choreography between the involved applications
 is defined.
 The integration is done at the application layer and the composed process
 is developed by combining activities, generally exposed through APIs.
 In the Mashups context, those languages are not enough for modeling application
s since, for instance, they do not provide the connection to different remote
 resources, e.g., REST resources, and do not handle the interaction with the
 client browsers.
 These limitations make it difficult to directly use these technologies
 for Mashups.
\begin_inset CommandInset citation
LatexCommand citep
key "DiLorenzo:2009:DIM:1558334.1558343"

\end_inset


\end_layout

\begin_layout Subsection
View
\end_layout

\begin_layout Standard
every application needs an interface to interact with the users, and a Mashup
 application is not an exception.
 Presentation Level (or User Interface) in Mashup applications is used to
 elicit user information as well as to display intermittent and final process
 information to the user.
 The technologies used to display the result to the user can be as simple
 as an HTML page, or a more complex web page developed with Ajax, Java Script,
 etc.
 In a server-side Mashup, the integration of data and services is made on
 the server.
 The server acts as a proxy between the Mashup application and other services
 involved in the application.
 On the other hand, a client-side Mashup integrates data and services on
 the client.
 For example, in a client-side Mashup, an Ajax application will do the required
 composition and parse it into a client’s web browser.
 Currently, the integration at the presentation level in Mashups is done
 manually.
 That is, a developer needs to combine the user interface of the wished
 components using either server-side or client-side technologies.The languages
 for integrating UI components and visualising the frontends can be server-side
 or client-side.
\begin_inset CommandInset citation
LatexCommand citep
key "DiLorenzo:2009:DIM:1558334.1558343"

\end_inset

 Here we focus on the client-side with the use of JavaScript
\end_layout

\begin_layout Subsection*
A gain in knowledge
\end_layout

\begin_layout Standard
Information about the skills and knowledge I needed to attain to develop
 the following research.
\end_layout

\begin_layout Subsubsection*
General JavaScript
\end_layout

\begin_layout Standard
Refreshing my skills about the JavaScript language.
 I had a course about it in the curriculum about 2 years ago.
 It was a basic course.
 Now and than I used some Javascript for the design of a few personal webpages.
\end_layout

\begin_layout Standard
I also followed a lot of tutorials online.
 I did a few at NetTuts about more advanced topics.
 Also some general subjects to improve my view.
 
\end_layout

\begin_layout Standard
It seems that there is already done a lot of investigation about cross domain
 exchange of data.
 On the web JavaScript is a commonly used scripting language.
 My vision of the technology was not the right one it seems.
 And also for a lot of people Javascript is equal to annoying popups, malicious
 script and some fancy stuff that is not quite necessary.
 But it's more than that.
 There is a wide variety of libraries available for the language, of which
 the most popular are JQuery, Dojo and Prototype.
 These provide an extra layer above the scripting language.
\end_layout

\begin_layout Subsubsection*
JQuery additions
\end_layout

\begin_layout Standard
Something about other libraries, JQuery?
\end_layout

\begin_layout Subsection*
Incremental and constantly adjusting
\end_layout

\begin_layout Standard
Troughout the work there was a constant flow of making choices and redesigned.
 I went a lot of times off course in finding a right solution or the best
 way to tackle the problem or specific details on certain topics.
 Hereby I needed to regain a lot of focus on what really mattered and which
 idea's could be best used.
 Also a lot of the times I came up with a solution and afterwards it seemed
 there was a better one, so the approach had to be changed or the design
 had to be implemented in another way.
\end_layout

\begin_layout Section
Data handling
\end_layout

\begin_layout Subsection
Format and access
\end_layout

\begin_layout Subsection
Internal data model
\end_layout

\begin_layout Subsection
Data mapping
\end_layout

\begin_layout Subsection
Data Flow Operators
\end_layout

\begin_layout Subsection
Data Refresh
\end_layout

\begin_layout Subsection
Mashup Output
\end_layout

\begin_layout Subsection
Extensibility
\end_layout

\begin_layout Subsection
Sharing
\end_layout

\begin_layout Standard
\begin_inset CommandInset citation
LatexCommand citep
key "sigmod:2009"

\end_inset


\end_layout

\begin_layout Standard
In Web development, a mashup is a Web page or application that uses and
 combines data, presentation or functionality from two or more sources to
 create new services.
 The term implies easy, fast integration, frequently using open APIs and
 data sources to produce enriched results that were not necessarily the
 original reason for producing the raw source data.
 The main characteristics of the mashup are combination, visualization,
 and aggregation.
 It is important to make existing data more useful, moreover for personal
 and professional use.
 To be able to permanently access the data of other services, mashups are
 generally client applications or hosted online.
 
\end_layout

\begin_layout Standard
Since 2010, two major mashup vendors have added support for hosted deployment
 based on Cloud computing solutions; that are Internet-based computing,
 whereby shared resources, software, and information are provided to computers
 and other devices on demand, like the electricity grid.
 In the past years, more and more Web applications have published APIs that
 enable software developers to easily integrate data and functions instead
 of building them by themselves.
 Mashups can be considered to have an active role in the evolution of social
 software and Web 2.0.
 Mashup composition tools are usually simple enough to be used by end-users.
 They generally do not require programming skills and rather support visual
 wiring of GUI widgets, services and components together.
 Therefore, these tools contribute to a new vision of the Web, where users
 are able to contribute.
 
\begin_inset CommandInset citation
LatexCommand citep
key "Wikipedia:mashup"

\end_inset


\end_layout

\begin_layout Subsection*
Data flow
\end_layout

\begin_layout Standard
About cross domain scripting.
 JavaScript locally or get information from remote server.
 Passing trough JSON or KML format; explained in the following section.
 One of the most important characteristics of the Web is certainly its heterogen
eity.
 This heterogeneity can be seen on data, processes, and even user interfaces.
\end_layout

\begin_layout Section
JavaScript integration
\end_layout

\begin_layout Subsubsection*
JSON
\end_layout

\begin_layout Standard
JSON (JavaScript Object Notation) is a lightweight data-interchange format.
 It is easy for humans to read and write.
 It is easy for machines to parse and generate.
 It is based on a subset of the JavaScript Programming Language, Standard
 ECMA-262 3rd Edition - December 1999.
 JSON is a text format that is completely language independent but uses
 conventions that are familiar to programmers of the C-family of languages,
 including C, C++, C#, Java, JavaScript, Perl, Python, and many others.
 These properties make JSON an ideal data-interchange language.
 
\begin_inset CommandInset citation
LatexCommand citep
key "Douglas:json"

\end_inset


\end_layout

\begin_layout Standard
JSON is built on two structures:
\end_layout

\begin_layout Enumerate
A collection of name/value pairs.
 In various languages, this is realized as an object, record, struct, dictionary
, hash table, keyed list, or associative array.
 An ordered list of values.
 In most languages, this is realized as an array, vector, list, or sequence.
\end_layout

\begin_layout Enumerate
These are universal data structures.
 Virtually all modern programming languages support them in one form or
 another.
 It makes sense that a data format that is interchangeable with programming
 languages also be based on these structures.
\end_layout

\begin_layout Standard
One of the most important functions in visualisation libraries is the access
 to the data.
 For small projects the libraries have functionality to manually add the
 data.
 For that you have to know a (minimum) of knowledge in programming languages.
 When the amount of data gets larger, this way of working becomes inefficiënt
 and a long work.
 That's why another method of data provision is supported: the JSON format.
 As explained previously, it is a very simple open format to exchange data.
 This way a lot more data can be easily queried and a lot more easilier.
 No more manual adding.
 The data is provided in a structured way.
 But here it is where there arises another problem: which format does the
 data has to be? It seems that this is not such a simple question.
 Altough many libraries provide JSON support, it has to be in the right
 format.
 Otherwise the library can't handle the data.
 Also different libraries have different standard or ways of working with
 the data input.
 There is no general abstraction of using the JSON structured data.
 It seems to be the good choice on one hand, it's not really possible to
 define a standard, that will do no right to the easy use of JSON.
 On the other hand, it makes the implementation more difficult.
 The provided data can have any structure, properties or different types
 of data like strings, numbers for example.
 There is no easy use of the data.
 
\end_layout

\begin_layout Subsubsection*
Same origin policy
\end_layout

\begin_layout Standard
In computing, the same origin policy is an important security concept for
 a number of browser-side programming languages, such as JavaScript.
 The policy permits scripts running on pages originating from the same site
 to access each other's methods and properties with no specific restrictions,
 but prevents access to most methods and properties across pages on different
 sites.
\end_layout

\begin_layout Section
Visualization
\end_layout

\begin_layout Subsection*
General visualisation techniques
\end_layout

\begin_layout Standard
Information graphics or infographics are graphic visual representations
 of information, data or knowledge.
 These graphics present complex information quickly and clearly, such as
 in signs, maps, journalism, technical writing, and education.
 With an information graphic, computer scientists, mathematicians, and statistic
ians develop and communicate concepts using a single symbol to process informati
on.
\end_layout

\begin_layout Subsection*
Javascript Visualization libraries
\end_layout

\begin_layout Standard
It seems that there is not much support for JSON or input of data for visualisat
ion libraries.
 Google has a good way for inserting data in their charts, trough Google
 Docs, wich works fine with Google Chart.
 But like we are used to, it protects it's market by recommending their
 own apps.
 So the possibilities for example are to use a Google document, to which
 a chart can be coupled, so the spreadsheet is used as database.
 Another option is to load a JSON object.
 This is more complicated.
 In fact it a more simple thing because the a json object can be very handy
 and easily managed.
 It has many advantages, which I explain in an other section about JSON
 
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
reffer to other section/ write more in detail about json
\end_layout

\end_inset

On one hand it seems to be easy to insert the JSON data for using with Google
 chart.
 But that's the trick; the data needs to be in a specific format to be supported.
 Otherwise it won't work.
 So eventually you allready have to know the exact data structure from the
 beginning to use it.
 But can your source work with it or is a conversion necessary.
 Here my library forms a coupling between the data.
 The original data can be any JSON object and the library will convert it
 into the right JSON object which can be used for the visualisation.
 
\end_layout

\begin_layout Standard
Sometimes users want just more than visualising their data.
 Or not all the data inserted is necessary or comparision of data is wanted.
 The user wants for example select a subset of the data or compare different
 'versions' of data.
 In the library this functionality is forseen; it is possible to select
 the source data, make subsets of data and compare different data with each
 other.
 By this I mean for example data from two different times, which then can
 be compared to highlight differences or similarities.
\end_layout

\begin_layout Standard
The access to data in Javascript.Visualisations need a lot of data.
 But how can we transfer this data in an easy way into Javascript without
 doing it manually.
\end_layout

\begin_layout Subsection*
Google Chart
\end_layout

\begin_layout Subsection*
d3.js
\end_layout

\begin_layout Standard
D3.js is a small, free JavaScript library for manipulating documents based
 on data.
 
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
citation to the official website
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Exploration of mainly Google Chart API and D3.js library.
 In fact D3 it is the succession of the formerly Protovis library.
 As the author suggest, the development of Protovis is not active any more.
 It's true, D3 as the successor has a lot of improvements compared to Protovis.
 
\end_layout

\begin_layout Standard
D3 allows you to bind arbitrary data to a Document Object Model (DOM), and
 then apply data-driven transformations to the document.
 As a trivial example, you can use D3 to generate a basic HTML table from
 an array of numbers.
 Or, use the same data to create an interactive SVG bar chart with smooth
 transitions and interaction.
\end_layout

\begin_layout Standard
D3 is not a traditional visualization framework.
 Rather than provide a monolithic system with all the features anyone may
 ever need, D3 solves only the crux of the problem: efficient manipulation
 of documents based on data.
 This gives D3 extraordinary flexibility, exposing the full capabilities
 of underlying technologies such as CSS3, HTML5 and SVG.
 It avoids learning a new intermediate proprietary representation.
 With minimal overhead, D3 is extremely fast, supporting large datasets
 and dynamic behaviors for interaction and animation.
 And, for those common needs, D3’s functional style allows code reuse through
 a diverse collection of optional modules.
\end_layout

\begin_layout Subsection*
Processing
\end_layout

\begin_layout Standard
Processing.js is the sister project of the popular Processing visual programming
 language, designed for the web.
 Processing.js makes your data visualizations, digital art, interactive animation
s, educational graphs, video games, etc.
 work using web standards and without any plug-ins.
 You write code using the Processing language, include it in your web page,
 and Processing.js does the rest.
 It's not magic, but almost.
\end_layout

\begin_layout Subsection*
Other
\end_layout

\begin_layout Section
Security of data
\end_layout

\begin_layout Itemize
Gettting the data secure
\end_layout

\begin_layout Itemize
Javascript is doing all the scripting local, so no data transfer to any
 server is needed
\end_layout

\begin_layout Section
(Storage of Data)
\end_layout

\begin_layout Section
Design decisions & issues
\end_layout

\begin_layout Standard
About the functionality.
 Where can I bring the most value.
 Graphic interface is less, processing of data gets more attention.
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "ch:mathtest"

\end_inset

Ei choro aeterno antiopam mea, labitur bonorum pri no.
 His no decore nemore graecis.
 In eos meis nominavi, liber soluta vim cu.
 Sea commune suavitate interpretaris eu, vix eu libris efficiantur.
\end_layout

\begin_layout Section
Usability
\end_layout

\begin_layout Standard
What is the usability of my solution? Integration into other projects: fork
 it.
 Plus as a starting reference for further research.
\end_layout

\begin_layout Standard
Improvements in my own implementation by going from hard code to a web user
 interface; See for more information 
\end_layout

\end_body
\end_document
