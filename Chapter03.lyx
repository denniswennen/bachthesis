#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass classicthesis
\use_default_options true
\maintain_unincluded_children false
\language american
\language_package default
\inputencoding default
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine natbib_numerical
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 2
\tocdepth 2
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Chapter
The mashup web service 
\begin_inset Note Note
status collapsed

\begin_layout Subsection*
Description of problems and open questions, How do I tackle this problem
 
\end_layout

\begin_layout Plain Layout
Middle chapters
\end_layout

\begin_layout Plain Layout
In some theses, the middle chapters are the journal articles of which the
 student was major author.
 There are several disadvantages to this format.
 One is that a thesis is both allowed and expected to have more detail than
 a journal article.
 For journal articles, one usually has to reduce the number of figures.
 In many cases, all of the interesting and relevant data can go in the thesis,
 and not just those which appeared in the journal.
 The degree of experimental detail is usually greater in a thesis.
 Relatively often a researcher requests a thesis in order to obtain more
 detail about how a study was performed.
\end_layout

\begin_layout Plain Layout
Another disadvantage is that your journal articles may have some common
 material in the introduction and the "Materials and Methods" sections.
\end_layout

\begin_layout Plain Layout
The exact structure in the middle chapters will vary among theses.
 In some theses, it is necessary to establish some theory, to describe the
 experimental techniques, then to report what was done on several different
 problems or different stages of the problem, and then finally to present
 a model or a new theory based on the new work.
 For such a thesis, the chapter headings might be: Theory, Materials and
 Methods, {first problem}, {second problem}, {third problem}, {proposed
 theory/model} and then the conclusion chapter.
 For other theses, it might be appropriate to discuss different techniques
 in different chapters, rather than to have a single Materials and Methods
 chapter.
\end_layout

\begin_layout Plain Layout
Here follow some comments on the elements Materials and Methods, Theory,
 Results and discussion which may or may not correspond to thesis chapters.
\end_layout

\begin_layout Plain Layout
Materials and Methods 
\end_layout

\begin_layout Plain Layout
This varies enormously from thesis to thesis, and may be absent in theoretical
 theses.
 It should be possible for a competent researcher to reproduce exactly what
 you have done by following your description.
 There is a good chance that this test will be applied: sometime after you
 have left, another researcher will want to do a similar experiment either
 with your gear, or on a new set-up in a foreign country.
 Please write for the benefit of that researcher.
 In some theses, particularly multi-disciplinary or developmental ones,
 there may be more than one such chapter.
 In this case, the different disciplines should be indicated in the chapter
 titles.
\end_layout

\begin_layout Plain Layout
Theory 
\end_layout

\begin_layout Plain Layout
When you are reporting theoretical work that is not original, you will usually
 need to include sufficient material to allow the reader to understand the
 arguments used and their physical bases.
 Sometimes you will be able to present the theory ab initio, but you should
 not reproduce two pages of algebra that the reader could find in a standard
 text.
 Do not include theory that you are not going to relate to the work you
 have done.
 When writing this section, concentrate at least as much on the physical
 arguments as on the equations.
 What do the equations mean? What are the important cases?
\end_layout

\begin_layout Plain Layout
When you are reporting your own theoretical work, you must include rather
 more detail, but you should consider moving lengthy derivations to appendices.
 Think too about the order and style of presentation: the order in which
 you did the work may not be the clearest presentation.
\end_layout

\begin_layout Plain Layout
Suspense is not necessary in reporting science: you should tell the reader
 where you are going before you start.
\end_layout

\begin_layout Plain Layout
Results and discussion 
\end_layout

\begin_layout Plain Layout
The results and discussion are very often combined in theses.
 This is sensible because of the length of a thesis: you may have several
 chapters of results and, if you wait till they are all presented before
 you begin discussion, the reader may have difficulty remembering what you
 are talking about.
 The division of Results and Discussion material into chapters is usually
 best done according to subject matter.
 Make sure that you have described the conditions which obtained for each
 set of results.
 What was held constant? What were the other relevant parameters? Make sure
 too that you have used appropriate statistical analyses.
 Where applicable, show measurement errors and standard errors on the graphs.
 Use appropriate statistical tests.
\end_layout

\begin_layout Plain Layout
Take care plotting graphs.
 The origin and intercepts are often important so, unless the ranges of
 your data make it impractical, the zeros of one or both scales should usually
 appear on the graph.
 You should show error bars on the data, unless the errors are very small.
 For single measurements, the bars should be your best estimate of the experimen
tal errors in each coordinate.
 For multiple measurements these should include the standard error in the
 data.
 The errors in different data are often different, so, where this is the
 case, regressions and fits should be weighted (i.e.
 they should minimize the sum of squares of the differences weighted inversely
 as the size of the errors.) (A common failing in many simple software packages
 that draw graphs and do regressions is that they do not treat errors adequately.
 UNSW student Mike Johnston has written a plotting routine[24] that plots
 data with error bars and performs weighted least square regressions.
 It is at http://www.phys.unsw.edu.au/3rdyearlab/graphing/graph.html).
 You can just 'paste' your data into the input and it generates a .ps file
 of the graph.
\end_layout

\begin_layout Plain Layout
In most cases, your results need discussion.
 What do they mean? How do they fit into the existing body of knowledge?
 Are they consistent with current theories? Do they give new insights? Do
 they suggest new theories or mechanisms?
\end_layout

\begin_layout Plain Layout
Try to distance yourself from your usual perspective and look at your work.
 Do not just ask yourself what it means in terms of the orthodoxy of your
 own research group, but also how other people in the field might see it.
 Does it have any implications that do not relate to the questions that
 you set out to answer?
\end_layout

\end_inset


\end_layout

\begin_layout Section
Mashing up content
\end_layout

\begin_layout Standard
Mashup is a new application development approach that allows users to aggregate
 multiple services to create a service for a new purpose.
 Even if the Mashup approach opens new and broader opportunities for data/servic
e consumers, the development process still requires the users to know not
 only how to write code using programming languages, but also how to use
 the different Web API's from different services.
 The tools are supposed to target “non-expert” users, but a programming
 knowledge is usually required.
 Some tools require considerable programming effort since the whole process
 needs to be implemented manually using instructions expressed in programming
 language such as Java Script.
 Others necessitate medium programming effort given that only some functionaliti
es need to be coded in an explicit way using a programming language; a graphical
 interface is offered to the user to express most of operations.
 At this time, there is no tool that requires low or no programming effort
 by the user to build a Mashup, which is necessary to claim that the tools
 are targeted for end-users.
\begin_inset CommandInset citation
LatexCommand citep
key "DiLorenzo:2009:DIM:1558334.1558343"

\end_inset

 In order to solve this problem, there is increasing effort put into developing
 tools which are designed to support users with little programming knowledge
 in Mashup applications development.
 This work highlights and analysis the richnesses and weaknesses of the
 Mashup tools with respect to the data integration aspect.
 We will be asking questions such as: How the tools handle data? What kind
 of processing is performed on the data? What is the output of Mashups?
 Which operators are provided for data transformation and for creating the
 data flow? What are the types of data supported by the available operators?
 
\end_layout

\begin_layout Subsection
Mashup tools
\end_layout

\begin_layout Standard
Currently a number of Mashup tools exist.
 For this work some of the most know tools are explained to give a view
 on the current state of these tools and understand their general approach
 to data integration.
\begin_inset CommandInset citation
LatexCommand citep
key "DiLorenzo:2009:DIM:1558334.1558343"

\end_inset


\end_layout

\begin_layout Standard
Mashups using this approach can be termed Rich Internet Applications (RIAs),
 meaning that they are very oriented towards the interactive user-experience.
 Rich internet applications are one hallmark of what's now being termed
 "Web 2.0", the next generation of services available on the World Wide Web.
 A benefit of client-side mashing include less overhead on behalf of the
 mashup server; data can be retrieved directly from the content provider
 and a more seamless user-experience is created where pages can request
 updates for portions of their content without having to refresh the entire
 page.
\begin_inset CommandInset citation
LatexCommand citep
key "ibm:thenewbreed"

\end_inset


\end_layout

\begin_layout Subsubsection*
YahooPipes
\end_layout

\begin_layout Standard
Yahoo Pipes
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
http://pipes.yahoo.com
\end_layout

\end_inset

 is a web-based tool provided by Yahoo.
 that provides a graphical user interface for building data mashups that
 aggregate web feeds, web pages, and other services, creating Web-based
 apps from various sources, and publishing those apps.
 The application works by enabling users to "pipe" information from different
 sources.
 A pipe is composed of one or more modules, each one performing a single
 task like retrieving feeds from a web source, filter, sort or merge feeds..
 A typical example of a mashup is the 'New York Times through Flickr'
\begin_inset Foot
status open

\begin_layout Plain Layout

\end_layout

\end_inset


\begin_inset CommandInset citation
LatexCommand citep
key "pipes:NYTtruFlickr"

\end_inset

, a pipe which takes The New York Times RSS feed and adds a photo from Flickr
 based on the keywords of each item.
 Also the 'Apartment Near Something'
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
http://pipes.yahoo.com/pipes/pipe.info?_id=1mrlkB232xGjJDdwXqIxGw
\end_layout

\end_inset

 made Yahoo Pipes more popular.
 
\end_layout

\begin_layout Standard
An API documentation with examples are provided.
 There is also a community with a forum to post questions and pipes created
 by other can be browsed and forked onto your own creations.
 That way work done by others can easily be duplicated for further use.
 Pipes can be cloned and adapted to differents needs for each user.
 The possibilities are endless, which enables a lot of creativity in collecting
 and creating content.
 It is a fairly easy application for aggreating data, with a visual User
 Interface.
 Users can create the pipe they want easily, via a visual drag and drop
 interface.
 This interface with a human-readable output makes it more accesible for
 the less skilled programmers.
 The users can build mashup applications by aggregating and manipulating
 data from web feeds (RSS, ATOM), web pages, and other services.
 (e.g.
 CSV) The content can be viewed on the pipe's website as a list of items
 or can be viewed on a Yahoo Map.
 Another option is to export the output to a webpage by embedding the 'Yaoo
 Badge' code or retrieving the JSON
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
JavaScrip Object Notation, further explained in the next chapter.
\end_layout

\end_inset

 or RSS output.
 The webservice implemented in this work, provides additional functionality
 by going on step further: making the data more accessable for visualisation.
 In JavaScript, there are written a lot of libraries to visualise data in
 all kinds of ways.
 But there is one mayor drawback and that is the access to the data.
 The libraries that make use of JavaScript, have limited or library-specific
 functionality in terms of data access.
\end_layout

\begin_layout Subsubsection*
Popfly (Deprecated, since August 24, 2009)
\end_layout

\begin_layout Standard
Popfly is a visual component-based Web-based Mashup application by Microsoft.
 It allows the users to create a Mashup combining data and media sources.
 Reusable components, or blocks, can act as middlemen between externally
 provisioned services, such as other Web services or implement a useful
 function in JavaScript.
 Blocks have operations with inputs and outputs, which are specified in
 a dedicated XML descriptor.
 Each block is associated to a service like for example Flicker and exposes
 one or more functionalities.
 A block might also act as a display surface — that is, a piece of user
 interface that takes data from other blocks and displays them, letting
 the user interact with them and enabling the mashup developer to lay out
 the mashup application.
\begin_inset CommandInset citation
LatexCommand citep
key "Yu:2008:UMD:1439188.1439257"

\end_inset


\end_layout

\begin_layout Standard
In fact Popfly is much more about data visualization than data manipulation,
 so the “mashed” data can be only visualized using the provided visualization
 tool.
 On July 16, 2009, the Popfly team announced that the Popfly service would
 be discontinued on August 24, 2009.
 All sites, references and resources of popfly were taken down, and this
 product is considered defunct.
\end_layout

\begin_layout Subsubsection
Google Mashup Editor (Deprecated, since January 14, 2009)
\end_layout

\begin_layout Standard
Google Mashup Editor (GME) was an AJAX development framework and a set of
 tools that enable developers to quickly and easily create simple web applicatio
ns and mashups with Google services like Google Maps and Google Base.
 It offered a set of standard modules that lets users encapsulate and lay
 out external data.
 For example, the list module represents an RSS or Atom feed as a list,
 whereas the item module represents a single item in a feed.
 Modules can fire predefined events, which other modules can capture and
 act on accordingly.
 Creating mashups involves developing user interface templates that contain
 a mixture of XML control tags and HTML/CSS layout elements with embedded
 JavaScript code.
 At runtime, GME fills the user interface templates and presents them as
 Web pages
\begin_inset CommandInset citation
LatexCommand citep
key "Yu:2008:UMD:1439188.1439257"

\end_inset


\end_layout

\begin_layout Subsubsection*
MashMaker
\end_layout

\begin_layout Standard
is a web-based tool by Intel for editing, querying and manipulating web
 data.
 MashMaker is different from the other tools in that it works directly on
 web pages.
 In fact, MashMaker allows users to create a mashup by browsing and combining
 different web pages.
 The final goal of this tool is to suggest to the user some enhancements
 (mashups or widgets), if available, for the visited web pages.
\end_layout

\begin_layout Standard
Mash Maker
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
http://software.intel.com/en-us/articles/intel-mash-maker-mashups-for-the-masses/#
Product Overview
\end_layout

\end_inset

 provides an environment for integrating data from annotated source Web
 pages based on a powerful, dedicated browser plug-in.
 Rather than taking input from structured data sources such as RSS or Atom,
 Mash Maker lets users annotate Web pages’ structure while browsing and
 use such annotations to scrap contents from annotated pages.
 Advanced users can leverage the integrated structure editor to input XPath
 expressions using FireBug’s DOM Inspector (a plug-in for the Firefox Web
 browser).
 Composing mashups with Mash Maker occurs via a copy-and-paste paradigm,
 based on two modes of merging contents: whole page merging, in which the
 user inserts one page’s content as a header into another page; and item-wise
 merging, in which the user combines contents from two pages at row level,
 based on additional user annotations.
 You can use the two techniques to merge more than two pages
\begin_inset CommandInset citation
LatexCommand citep
key "Yu:2008:UMD:1439188.1439257"

\end_inset

.
\end_layout

\begin_layout Subsubsection*
Firefox Ubiquity
\end_layout

\begin_layout Standard
Ubiquity was a Mozilla Labs experiment that was in development from 2008
 to 2009.
 Its purpose was to explore whether a radically different type of interface
 to the Web — a task-centric, natural-language-based command line — could
 help us get common Web tasks done faster.
 A collection of quick and easy natural-language-derived commands that act
 as mashups of web services, thus allowing users to get information and
 relate it to current and other webpages.
 It also allows Web users to create new commands without requiring much
 technical background.
 
\end_layout

\begin_layout Standard
Development is currently on indefinite hiatus.
 The experiment will most likely be revisited at some point in the future.
 In the meantime, the Ubiquity extension for Firefox is still available
 for download.
 Also, some of the ideas from Ubiquity are being implemented in Mozilla
 Firefox' Add-on Builder and SDK.
\end_layout

\begin_layout Subsubsection*
WSO2
\end_layout

\begin_layout Standard
The WSO2 Mashup Server is an open source mashup platform that hosts JavaScript
 based mashups.
 WSO2 is stated as the ideal platform for defining composite services for
 user interfaces and mobile applications, a simple way to deploy services
 developed in JavaScript.
 Access to REST and WS-* web services, feeds, and scraped web pages with
 data scripted together quickly using common Web developer skills, the result
 being a new service, or a web page, gadget, email or instant message.
 The ability to secure hosted Mashups, support for both recurring and longer-run
ning tasks and service lifecycles, monitoring and configuration of security
 and quality of service settings such as throttling.
 The source code is freely available under the open source Apache License.
 It provides a runtime platform for developing and deploying mashups.
 It can be downloaded and deployed locally or within an organization.
\end_layout

\begin_layout Subsubsection
\begin_inset Note Note
status open

\begin_layout Subsubsection
IBM
\end_layout

\begin_layout Plain Layout
IBM’s QEDWiki is another example of a mashup tool.
 However, unlike Yahoo! Pipes, QEDWiki allows users to create widgets that
 access different services and data sources.
 Using the wiki metaphor, QEDWiki aims to make the composition process iterative
 and collaborative.
 While similar in objectives, both Pipes and QEDWiki differ from the Swashup
 platform, which focuses instead on giving common structures to mashups
 and creating a language to facilitate their creation and sharing.
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Mashup levels
\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
A lot of searching and analysing the problem.
 I spend a lot of time trying to figure out what exactly the problem is
 and how to define it.
 Also in this view, where I can bring the most value.
 What are the difficult parts, which ones are already investigated or need
 some more attention.
 It's not just one item to research, but a complex situation.
 This can have several views and approaches, each aimed at specific targets.
\end_layout

\end_inset

Data mediation involves converting, transforming, and combining the data
 elements from one or multiple services to meet the needs of the operations
 of another.
 For instance, mediating between data models of tags represented in both
 the Flickr 1 and the Eventful’s APIs.Process (or protocol) mediation is
 essentially choreographing between the different services to create a new
 process.
 For instance, process mediation includes invoking the various service methods,
 waiting for asynchronous messages, and sending any necessary confirmation
 messages.
 User interface customization is used to elicit user information as well
 as to display intermittent and final process information to the user.
 Depending on the domain, the user interface customization can be as simple
 as an HTML page, a more complex series of input forms, or an interactive
 AJAX UI.
 
\begin_inset CommandInset citation
LatexCommand citep
key "LanguageforWebAPIs"

\end_inset


\end_layout

\begin_layout Standard
Here in this section I provide more detail on my approach.
 There is a difference between the literature study and the implementation.
 The first is a general synthesis, an idea or a problem which requires some
 thinking work to come up with a solution.
 The second part is, as it were, a more lined selection of the problem which
 than can be tackeld.
 D
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
escription of problems and open questions, How do I tackle this problem
 Middle chapters A lot of searching and analysing the problem.
 I spend a lot of time trying to figure out what exactly the problem is
 and how to define it.
 Also in this view, Where I can bring the most value? What are the difficult
 parts? Which ones are already investigated or need some more attention?
 
\end_layout

\end_inset


\end_layout

\begin_layout Section
Data handling
\end_layout

\begin_layout Standard
defines an API as an interface provided by an application that lets users
 interact with or respond to data or service requests from other programs,
 applications, or web sites.
 APIs facilitate the integration between several applications by allowing
 data retrieval and data exchange between applications.
 APIs help the developers access and consume data and resources without
 going in to much detail on their internal structure.
 On theWeb, providers like Microsoft, Google, eBay, and Yahoo offer web
 APIs for retrieving content from their web sites.
 However, some common data sources do not expose their contents through
 APIs.
 So, other techniques as screen scraping are needed to extract information.
\end_layout

\begin_layout Subsection
Format and access
\end_layout

\begin_layout Standard
In a Mashup application, a user can integrate data described in different
 formats.
 For example, web feed format is used to publish frequently updated content
 such as blog entries, news and so on; tabular format is suitable for describing
 table-based data models such as csv files or spreadsheets; markup-based
 format (e.g., HTML and XML) is, of course, commonly used to publish data;
 multimedia content such as video, audio and images are becoming increasingly
 prevalent.
 These types of data can be available to the user from different data sources.
 The most common data sources can be traditional database systems, local
 files that are available in the owner’s file system, web pages, web services
 and web applications.
 To facilitate Web data retrieval, providers often expose their content
 through web APIs.
 APIs can be also seen as a useful means for data and application mediation.
 Here we consider the role of APIs from the data integration point of view
 in the sense that they offer specific types and formats of data.
 It should be noted that an API can offer several formats of data, e.g., csv,
 xml, etc.
\end_layout

\begin_layout Subsection
Internal data model
\end_layout

\begin_layout Standard
As stated before, the objective of a Mashup application is to combine different
 resources, data in our case, to produce a new application.
 These resources come generally from different sources, are in different
 formats, and vehicle different semantics.
 To support this, each Mashup tool uses an internal data model.
 An internal data model is a single global schema that represents a unified
 view of the data.
 A Mashup tool’s internal data model can be either (i) Graphbased or (ii)
 Object-based.
 In a Graph-based model, the graph refers to the model based on XML and
 those consumed as they are (i.e., XML).
 This can include pure XML, RDF, RSS, etc.
 Most of the Mashup applications use a Graph-based model as an internal
 data model.
 This is certainly motivated by the fact that most of today’s data available
 on the web are in this format and also, most of the Mashup tools are available
 via the Web.
 That is, all the data that are used by the Mashup tools, in this category,
 transform the input data into an XML representation before processing it.
 For example, Damia translates the data into tuples of sequences of XML
 data [5].
 In an Objectbased model, the internal data is in the form of objects (in
 the classical sense of the object-oriented programming).
 An object is an instance of a class which defines the features of an element,
 including the element’s characteristics (its attributes, fields or properties)
 and the element’s behaviors (methods).
 It should be noted that in this case, there is no explicit transformation,
 performed by the tool, like in the case of the graph-based model, but the
 programmer needs to define the structure of the object according to her
 data.
\begin_inset CommandInset citation
LatexCommand citep
key "DiLorenzo:2009:DIM:1558334.1558343"

\end_inset


\end_layout

\begin_layout Subsection
Data mapping
\end_layout

\begin_layout Standard
To instantiate an internal data model from an external data source, the
 Mashup tools must provide strategies to specify the correspondences between
 their internal data model and the desired data sources.
 This is achieved by means of data mapping.
 Data mapping is the process needed to identify the correspondences between
 the elements of the source data model and the internal data model [26].
 Generally speaking, a data mapping can be: (i) manual, where all the correspond
ences between the internal data model and the source data model are manually
 specified, one by one, by the application designer.
 In this case, the tool should then provide some facilities for the user
 to design the transformation.
 (ii) Semiautomatic, where the system exploits some meta-data (e.g., fields
 names and types) to propose some possible mapping configurations.
 Automatic, where all the correspondences between the two data models are
 automatically generated, without user intervention [26].
 This is a challenging issue in the data integration area.
 Since the Mashup area is in its “early stage”, this type of mapping is
 not supported by any Mashup tool.
 It should be noted that the mapping process may require an intermediary
 step, i.e., a wrapping step, in order to transform the source format to the
 internal format, e.g., from csv to XML.
\begin_inset CommandInset citation
LatexCommand citep
key "DiLorenzo:2009:DIM:1558334.1558343"

\end_inset


\end_layout

\begin_layout Subsection
Data Flow Operators
\end_layout

\begin_layout Standard
Data flow operators allow performing operations either on the structure
 of the data (similar to the data definition language/ operators in the
 relational model), or on the data (content) itself (similar to the data
 manipulation language/ operator in the relational model).
 More concretely, data flow operators support: (i) restructuring of the
 schema of the incoming data, e.g., adding new elements, adding new attributes
 to elements; (ii) elaborating on a data set such as extracting a particular
 piece of information, combining specific elements that meet a given condition,
 change the value of some elements; (iii) building a new data set from other
 data sets such as merging, joining or aggregating data (similar to the
 concept of views in databases).
\end_layout

\begin_layout Subsection
Data Refresh
\end_layout

\begin_layout Standard
In some cases, e.g., stock market, data is generated and updated continuously.
 Various strategic decisions, especially in enterprises, are generally taken
 according to the last status/ values of the data.
 It is then important that a system propagates the updates of the data sources
 to the concerned user(s).
 There are two strategies dealing with the status of the data in the source,
 depending on the objective of the user: (i)pull strategy and (ii)push strategy[
8].
 The pull strategy is based on frequent and repetitive requests from the
 client.
 The pulling frequency is set to be lower than the average update frequency
 of the data in the source itself.
 The freshness of the data depends on the pulling frequency, i.e., the higher
 the pulling frequency, the fresher the data and vice-versa.
 One of the main disadvantages of a high refresh frequency is that unnecessary
 requests may be generated to the server.
 In the push strategy, the client does not send requests but needs to register
 to the server.
\end_layout

\begin_layout Subsection
Mashup Output
\end_layout

\begin_layout Standard
We consider the output as a dimension in this study since a user might be
 interested in exporting her Mashup (the data flow) result in another format
 in order to reuse it or to process it with another particular application
 (e.g., spreadsheet) for further processing instead of visualizing it.
 That is, we can distinguish two main output categories: Human oriented
 output and application oriented output.
 In the Human oriented output, the output is targeted for human interpretation,
 e.g., a visualization on a map, on an HTML page, etc.
 That is, for this category, the output can be considered as the “final
 product” of the whole process.
 For the processing oriented output, the output is mainly targeted for machine
 processing.
 This is interesting in the case where the considered data needs to be further
 processed for, e.g., a knowledge discovery process.
 It should be noted that this category can, at some stage, include the first
 category, e.g., an RSS output can be at the same time visualized on an HTML
 page and also can be used by other applications for other processing tasks.
 Yahoo Pipes provides a lot of functionality on data output.
 On the website a human oriented output is providen; user created pipes
 can be browsed and excuted, where the result can be viewed on a HTML page
 or Yahoo Map.
 Besides, several processing oriented ouputs are provided to export the
 data to your own side; even in an human readable way.
 A Yahoo! Pipes badge allows you to have Pipes generated content by inserting
 the script code on your blog, website or social network.
 Currently there are 3 badges: a list, image and map badge.
 All badges can be configured by color, size, and number of items.
 Other outputs like RSS, JSON and PHP provide a more transparant access
 to web developers to use the data for further processing in their own web
 applications.
\end_layout

\begin_layout Subsection
Extensibility
\end_layout

\begin_layout Subsection
Sharing
\end_layout

\begin_layout Standard
Mashups are based on the emerging technologies of the Web 2.0 in which people
 can create, annotate, and share information in an easy way.
 Enabling security and privacy for information sharing in this huge network
 is certainly a big challenge.
 This task is made more difficult especially since the targeted public with
 the Web 2.0 is, or supposed to be, a general public and not expert in computing
 or security.
 This dimension defines the modality that the tool offers to enable resources
 sharing by guaranteeing privacy and security in the created Mashup applications.
 This is a challenging area in the current Mashup and a lot of work remains
 to be done.
 This dimension includes the following three indicators: 1) What is shared
 in the Mashup?, 2) How is this shared? and 3)Who are the users with whom
 this (the shared resource(s)) is shared with? For the What, the shared
 resource can be total, partial, or nothing.
 The shared resource can be given different rights such as read only (user
 can read all entries but cannot write any entry), read/write (user can
 read and write all entries in the data), no access (user cannot read or
 write any entries).
 The Who as for it can be All people, Group, or particular User.
 Notice that for each member, different sharing policies (what and how)
 can be specified and applied.For example, GME and Yahoo Pipes allow implementing
 sharing policies.
 In GME, the sharing policy can be: (i) total, i.e., read access to source
 code, data and output.
 (ii) Partial, i.e., read access to source code.
 (iii) Nothing, where the Mashup is not shared.
 When a Mashup is shared in GME, for the data used to build the application,
 the designer can decide to share it with a group or with all users by specifyin
g Read/Write policies.
 In Yahoo Pipes, if a private element is used (Private string or Private
 text input) the code of the shared Mashup is available as well as the Mashup
 output.
\begin_inset CommandInset citation
LatexCommand citep
key "DiLorenzo:2009:DIM:1558334.1558343"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset citation
LatexCommand citep
key "sigmod:2009"

\end_inset


\end_layout

\begin_layout Standard
In Web development, a mashup is a Web page or application that uses and
 combines data, presentation or functionality from two or more sources to
 create new services.
 The term implies easy, fast integration, frequently using open APIs and
 data sources to produce enriched results that were not necessarily the
 original reason for producing the raw source data.
 The main characteristics of the mashup are combination, visualization,
 and aggregation.
 It is important to make existing data more useful, moreover for personal
 and professional use.
 To be able to permanently access the data of other services, mashups are
 generally client applications or hosted online.
 
\end_layout

\begin_layout Standard
Since 2010, two major mashup vendors have added support for hosted deployment
 based on Cloud computing solutions; that are Internet-based computing,
 whereby shared resources, software, and information are provided to computers
 and other devices on demand, like the electricity grid.
 In the past years, more and more Web applications have published APIs that
 enable software developers to easily integrate data and functions instead
 of building them by themselves.
 Mashups can be considered to have an active role in the evolution of social
 software and Web 2.0.
 Mashup composition tools are usually simple enough to be used by end-users.
 They generally do not require programming skills and rather support visual
 wiring of GUI widgets, services and components together.
 Therefore, these tools contribute to a new vision of the Web, where users
 are able to contribute.
 
\begin_inset CommandInset citation
LatexCommand citep
key "Wikipedia:mashup"

\end_inset


\end_layout

\begin_layout Subsection*
Data flow
\end_layout

\begin_layout Standard
About cross domain scripting.
 JavaScript locally or get information from remote server.
 Passing trough JSON or KML format; explained in the following section.
 One of the most important characteristics of the Web is certainly its heterogen
eity.
 This heterogeneity can be seen on data, processes, and even user interfaces.
\end_layout

\begin_layout Subsection
Data Security
\end_layout

\begin_layout Itemize
Gettting the data secure
\end_layout

\begin_layout Itemize
Javascript is doing all the scripting local, so no data transfer to any
 server is needed
\end_layout

\begin_layout Standard
The Yahoo Maps Geocoding service is a REST-based service.
 To call it, you specify the appropriate URL along with any parameter-value
 pairs.
\end_layout

\begin_layout Standard
Because a client-side mashup brings in code or content from another site,
 you need to assess the risks of these outside additions to your site.
 In some cases, the risk is small.
 For example, if you bring in an image or an RSS feed, the image or content
 might not be available.
 That's a limited risk.
 The browser might display a symbol indicating that an image is missing,
 or the RSS feed might not appear on the page.
 But your application would not likely be impacted in any other way.
 In other words, the missing content would not damage your application.
 But when you include a JavaScript file from another site, your risk increases.
 In fact, bringing in a JavaScript file circumvents a basic security protection
 for Ajax interactions called the browser security sandbox, also known as
 the XMLHttpRequest sandbox.
 Many mashups use Ajax functionality.
 An XMLHttpRequest is a JavaScript object that is used to exchange data
 asynchronously between a web client and web server in an Ajax transaction.
 To protect against possible maliciousness, most browsers allow JavaScript
 code that contains an XMLHttpRequest to communicate only with the site
 from which the browser loaded the code.
\end_layout

\begin_layout Subsubsection*
Same origin policy
\end_layout

\begin_layout Standard
The earlier article in this series covered some of the major reasons for
 using the proxy style.
 A primary reason for using the proxy style is to contend with the basic
 security protection that the browser security sandbox provides.
 In a proxy-style mashup, a server-side proxy accesses the service.
 Because of that, a server-side mashup is not subject to the browser security
 sandbox and can connect to a site other than the server of origin to access
 a service.A client-side mashup avoids the constraints of the browser security
 sandbox because the service call is made from a dynamically created <script>
 tag, which can communicate with any domain.
 
\begin_inset CommandInset citation
LatexCommand citep
key "sunclientsidemashups:2007"

\end_inset


\end_layout

\begin_layout Standard
In computing, the same origin policy is an important security concept for
 a number of browser-side programming languages, such as JavaScript.
 The policy permits scripts running on pages originating from the same site
 to access each other's methods and properties with no specific restrictions,
 but prevents access to most methods and properties across pages on different
 sites.
\end_layout

\begin_layout Section
Mashups for visualisation
\end_layout

\begin_layout Subsection*
A gain in knowledge
\end_layout

\begin_layout Standard
Information about the skills and knowledge I needed to attain to develop
 the following research.
\end_layout

\begin_layout Subsection*
Incremental and constantly adjusting
\end_layout

\begin_layout Standard
Troughout the work there was a constant flow of making choices and redesigned.
 I went a lot of times off course in finding a right solution or the best
 way to tackle the problem or specific details on certain topics.
 Hereby I needed to regain a lot of focus on what really mattered and which
 idea's could be best used.
 Also a lot of the times I came up with a solution and afterwards it seemed
 there was a better one, so the approach had to be changed or the design
 had to be implemented in another way.
\end_layout

\end_body
\end_document
