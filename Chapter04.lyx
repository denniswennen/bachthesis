#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass classicthesis
\use_default_options true
\maintain_unincluded_children false
\language american
\language_package default
\inputencoding default
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 0
\use_mhchem 1
\use_mathdots 1
\cite_engine natbib_numerical
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 2
\tocdepth 2
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Chapter
Methods & solutions
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
Final chapter, references and appendices
\end_layout

\begin_layout Plain Layout
Conclusions and suggestions for further work Your abstract should include
 your conclusions in very brief form, because it must also include some
 other material.
 A summary of conclusions is usually longer than the final section of the
 abstract, and you have the space to be more explicit and more careful with
 qualifications.
 You might find it helpful to put your conclusions in point form.
 It is often the case with scientific investigations that more questions
 than answers are produced.
 Does your work suggest any interesting further avenues? Are there ways
 in which your work could be improved by future workers? What are the practical
 implications of your work?
\end_layout

\begin_layout Plain Layout
This chapter should usually be reasonably short---a few pages perhaps.
 As with the introduction, I think that it is a good idea to ask someone
 who is not a specialist to read this section and to comment.
\end_layout

\begin_layout Plain Layout
References (See also under literature review) It is tempting to omit the
 titles of the articles cited, and the university allows this, but think
 of all the times when you have seen a reference in a paper and gone to
 look it up only to find that it was not helpful after all.
 Should you reference web sites and, if so, how? If you cite a journal article
 or book, the reader can go to a library and check that the cited document
 and check whether or not it says what you say it did.
 A web site may disappear, and it may have been updated or changed completely.
 So references to the web are usually less satisfactory.
 Nevertheless, there are some very useful and authoritative sources.
 So, if the rules of your institution permit it, it may be appropriate to
 cite web sites.
 (Be cautious, and don't overuse such citations.
 In particular, don't use a web citation where you could reasonably use
 a "hard" citation.
 Remember that your examiners are likely to be older and more conservative.)
 You should give the URL and also the date you downloaded it.
 If there is a date on the site itself (last updated on .....) you should included
 that, too.
\end_layout

\begin_layout Plain Layout
Appendices If there is material that should be in the thesis but which would
 break up the flow or bore the reader unbearably, include it as an appendix.
 Some things which are typically included in appendices are: important and
 original computer programs, data files that are too large to be represented
 simply in the results chapters, pictures or diagrams of results which are
 not important enough to keep in the main text.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
Previously in the first versions of Yahoo Pipes, there was only some limited
 support for data output and JSON was not available.
 Not only Yahoo Pipes celebrates the adding of JSON, but other applications
 will soon follow.
 It is what is called mashing up the web: What is a scripting language and
 in particular Javascript? ..add here some information about javascript
\end_layout

\begin_layout Plain Layout
What can you do with it? Why use it? Advantages/disadvantages? - Run locally,
 so server included - Adds functionality and also better user interaction.
 It's not just one item to research, but a complex situation.
 This can have several views and approached, each aimed at specific targets.
 
\end_layout

\end_inset


\end_layout

\begin_layout Section
Theoretical Framework
\end_layout

\begin_layout Standard
\begin_inset Marginal
status collapsed

\begin_layout Plain Layout
tekst moet nog verbeterd worden
\end_layout

\end_inset

It provides an abstraction layer between Yahoo Pipes and JavaScript visualisatio
n libraries.
 It's even more than that, it provides easy handling of JSON data.
 For Yahoo Pipes, the most commonly and best practice of the data is by
 exporting it by JSON or KML for geomaps.
 You can use other formats but it will only get more complicated.
 JSON does the job well.
 The valve library loads in the JSON data et voila.
 Ready to go.
 From here on you can get a clear view on the data itself, in JSON format.
 JSON is in fact just a text string that is not realy human readable.
 So it would be good to have something that makes it more readable without
 losing the overal view over the data.
 A decent JSON viewer can come in handy to have a good view on the used
 input data.
 This way characteristics of the data, types, faults, stats can be easily
 viewed without any hassle.
 Then it's up to part 2: visualising the data.
 Here it get's tricky.
 How does the user want to see it's input data and what does he wants to
 do with it? At this moment visualisation libraries provided endless possibiliti
es and beautiful examples of what you can do with data.
 The visualisations are appealing.
 One and the most important use is to get a better view what's happening.
 By visualising, the data can be analysed and investigated to gain new insights.
 Another advantage is to have the data compared with an other version of
 the data.
 This way differences or similarities in time can be spotted.
 Another topic is filtering.
 It's possible that the user has collected the data from different sources,
 and that the data contains a lot of overhead which is not necessary.
 This way it should be possible for the library to provide filtering.
 There are 2 possibilities: The first one is filtering the view of the data.
 By that I mean that the original data is used and not modified, but when
 for example only certain parts or attributes of the data want to be used.
 If the original data has a lot of attributes and only a few are necessary,
 these are visualised and the other attributes are filtered out.
 Another possibilty is that the user wants a subset of the data; like say
 the first 300 items instead of everything.
 Or only the items that belongs to a specific category.
 An interesting fact is that the data can be filtered by using the data
 itself.
 For example defining maximums and miminums, using the bounds of the provided
 data or division into categories using an attribute of the original data.
 Sorting of the data is another function: sorting by data, category or time.
\end_layout

\begin_layout Section
Library implementation
\end_layout

\begin_layout Standard
According to the model view controller model
\end_layout

\begin_layout Subsection
Functionality
\end_layout

\begin_layout Standard
90% off course > steering
\end_layout

\begin_layout Standard
Focus on the handling of data.
 Less on the user interface.
 Why? It seems more important to have a good data handling, this brings
 on the greatest value.
 Afterwards it is something good to fine tune the user interface.
 This way the library will become more accessibly for less skilled programmers
 who wish to use the visualise data.
\end_layout

\begin_layout Subsubsection
Pipe loading
\end_layout

\begin_layout Subsubsection
Data storage and viewing
\end_layout

\begin_layout Subsubsection
User interaction
\end_layout

\begin_layout Subsubsection
Visualisation
\end_layout

\begin_layout Subsection
Testing
\end_layout

\begin_layout Itemize
debugging; getting the import of data right
\end_layout

\begin_layout Itemize
compared the different approaches
\end_layout

\begin_layout Subsection
Performance
\end_layout

\begin_layout Itemize
Javascript is a powerful language, if the code is written well
\end_layout

\begin_layout Itemize
I took into consideration to write as clear code as possible, paying attention
 to details, implemented speed optimizations, object oriented javascript
\end_layout

\begin_layout Subsection
!! Usability
\end_layout

\begin_layout Itemize
posibility to use the code in your own website; portability
\end_layout

\begin_layout Itemize
User interface for a great overview: viewing data and visualisation + control
 dashboard
\end_layout

\begin_layout Itemize
Clear documentation: for noobs as for more experienced developers
\end_layout

\begin_layout Section
Critical analysis of the results
\end_layout

\begin_layout Standard
Some time has passed between the assignment and the actual implementation.
 A lot of time.
 Also the technologies have evolved, already some things are forseen as
 implementation.
\end_layout

\begin_layout Itemize
difficult to get a good grip on the data; not a good constistency, what
 is data? it can be everything
\end_layout

\begin_layout Itemize
support for adding data easily
\end_layout

\begin_layout Section
Future work
\end_layout

\begin_layout Standard
What still has to be implemented, what could be improved, achieved..
\end_layout

\begin_layout Itemize
improvement of usability by expanding the User Interface: views on the data,
 adding functionality for the control dashboard, adding support for more
 visualisation libraries, performance updates in handling large amounts
 of data
\end_layout

\end_body
\end_document
